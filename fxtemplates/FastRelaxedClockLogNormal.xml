<beast version='2.0'
       namespace='beast.app.beauti:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.base.evolution.tree.coalescent:beast.base.util:beast.base.math:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.math.distributions'>


    <!-- Clock models -->
    <mergewith point='clockModelTemplates'>

          <!-- Fast Relaxed clock log normal -->
        <subtemplate id='FastRelaxedClockLogNormal' class='beast.base.evolution.branchratemodel.UCRelaxedClockModel'
                     mainid='FastRelaxedClock.c:$(n)'
                     suppressInputs='
                     beast.base.evolution.branchratemodel.UCRelaxedClockModel.numberOfDiscreteRates,
                     beast.base.evolution.branchratemodel.UCRelaxedClockModel.rateQuantiles,
                     beast.base.evolution.branchratemodel.UCRelaxedClockModel.rates,
                     beast.base.evolution.branchratemodel.UCRelaxedClockModel.normalize,
                     beast.base.evolution.branchratemodel.UCRelaxedClockModel.distr,
                     beast.base.evolution.branchratemodel.UCRelaxedClockModel.rateQuantiles'>
            <![CDATA[
<!--
    <branchRateModel id="FastRelaxedClock.c:$(n)" spec="beast.base.evolution.branchratemodel.UCRelaxedClockModel"
         rateQuantiles="@fastRates.c:$(n)" tree="@Tree.t:$(n)">
        <distr id="ApproxLogNormal.c:$(n)" spec="beast.math.distributions.PiecewiseLinearDistribution">
            <LogNormal id="FastLogNormalDistributionModel.c:$(n)" S="@fastUcldStdev.c:$(n)" meanInRealSpace="true" name="distr">
        	    <M spec="parameter.RealParameter" estimate="false">1</M>
            </LogNormal>
        </distr>
        <parameter id="fastUcldMean.c:$(n)" estimate="false" name="clock.rate">1.0</parameter>
    </branchRateModel>
-->

    <branchRateModel id="FastRelaxedClock.c:$(n)" spec="beast.base.evolution.branchratemodel.UCRelaxedClockModel"
         rates="@fastRates.c:$(n)" tree="@Tree.t:$(n)">
            <LogNormal id="FastLogNormalDistributionModel.c:$(n)" S="@fastUcldStdev.c:$(n)" meanInRealSpace="true" name="distr">
        	    <M spec="parameter.RealParameter" estimate="false">1</M>
            </LogNormal>
        <parameter id="fastUcldMean.c:$(n)" estimate="false" name="clock.rate">1.0</parameter>
    </branchRateModel>


    <parameter id="fastUcldStdev.c:$(n)" name="stateNode">0.2</parameter>
    <parameter id="fastRates.c:$(n)" name="stateNode">0.5</parameter>


    <prior id="FastRatePriorDistrbution.c:$(n)" name="distribution" x="@fastRates.c:$(n)">
    	<LogNormal S="@fastUcldStdev.c:$(n)"  meanInRealSpace="true" name="distr">
        	<M spec="parameter.RealParameter" estimate="false">1</M>
	    </LogNormal>
    </prior>


    <prior id="fastUcldStdevPrior.c:$(n)" name="distribution" x="@fastUcldStdev.c:$(n)">

        <!-- this prior has a median of 0.1 and 97.5% of its probability is below S=1 -->
        <distr spec="beast.base.inference.distribution.Gamma">
            <parameter name='alpha' value="0.5396" estimate='false'/> <!-- shape -->
            <parameter name='beta' value="0.3819" estimate='false'/> <!-- scale -->
        </distr>

    </prior>

    <prior id="fastUcldMeanPrior.c:$(n)" name="distribution" x="@fastUcldMean.c:$(n)">
        <Gamma alpha="0.1" beta="100.0" name="distr"/>
    </prior>


    <operator id="FastInternalnodesOperator.c:$(n)" spec="consoperators.InConstantDistanceOperator" twindowSize="0.02" clockModel="@FastRelaxedClock.c:$(n)" tree="@Tree.t:$(n)" rates="@fastRates.c:$(n)" weight="20.0">
        <kernel id="KernelDistribution$Bactrian.0" spec="beast.base.inference.operator.kernel.KernelDistribution$Bactrian" m="0.95" mode="bactrian_normal"/>
    </operator>

    <operator id="FastRootOperator1.c:$(n)" spec="consoperators.SimpleDistance" twindowSize="0.02" tree="@Tree.t:$(n)" rates="@fastRates.c:$(n)" clockModel="@FastRelaxedClock.c:$(n)" weight="1.0">
        <kernel id="KernelDistribution$Bactrian.1" spec="beast.base.inference.operator.kernel.KernelDistribution$Bactrian" m="0.95" mode="bactrian_normal"/>
    </operator>

    <operator id="FastRootOperator2.c:$(n)" spec="consoperators.SmallPulley" dwindowSize="0.02" tree="@Tree.t:$(n)" rates="@fastRates.c:$(n)" clockModel="@FastRelaxedClock.c:$(n)" weight="1.0">
       <kernel id="KernelDistribution$Bactrian.2" spec="beast.base.inference.operator.kernel.KernelDistribution$Bactrian" m="0.95" mode="bactrian_normal"/>
    </operator>

    <operator id="FastRootOperator3.c:$(n)" spec="consoperators.BigPulley" twindowSize="0.02" dwindowSize="0.002" tree="@Tree.t:$(n)" rates="@fastRates.c:$(n)"  weight="0.1"/>

    <operator id="fastUcldStdevScaler.c:$(n)" spec="consoperators.UcldScalerOperator"
              rates="@fastRates.c:$(n)" stdev="@fastUcldStdev.c:$(n)" distr="@FastLogNormalDistributionModel.c:$(n)" scaleFactor="0.5" weight="5.0"/>

<!--
    <operator id="FastInternalnodesOperator.c:$(n)" spec="consoperators.InConstantDistanceOperator" twindowSize="0.02" clockModel="@FastRelaxedClock.c:$(n)" tree="@Tree.t:$(n)" quantiles="@fastRates.c:$(n)" weight="20.0">
        <kernel id="KernelDistribution$Bactrian.0" spec="beast.base.inference.operator.kernel.KernelDistribution$Bactrian" m="0.95" mode="bactrian_normal"/>
    </operator>

    <operator id="FastRootOperator1.c:$(n)" spec="consoperators.SimpleDistance" twindowSize="0.02" tree="@Tree.t:$(n)" quantiles="@fastRates.c:$(n)" clockModel="@FastRelaxedClock.c:$(n)" weight="1.0">
        <kernel id="KernelDistribution$Bactrian.1" spec="beast.base.inference.operator.kernel.KernelDistribution$Bactrian" m="0.95" mode="bactrian_normal"/>
    </operator>

    <operator id="FastRootOperator2.c:$(n)" spec="consoperators.SmallPulley" dwindowSize="0.02" tree="@Tree.t:$(n)" quantiles="@fastRates.c:$(n)" clockModel="@FastRelaxedClock.c:$(n)" weight="1.0">
       <kernel id="KernelDistribution$Bactrian.2" spec="beast.base.inference.operator.kernel.KernelDistribution$Bactrian" m="0.95" mode="bactrian_normal"/>
    </operator>

    <operator id="fastUcldStdevScaler.c:$(n)" spec="ScaleOperator" parameter="@fastUcldStdev.c:$(n)" scaleFactor="0.5" weight="3.0"/>
-->
    <operator id="fastUcldMeanScaler.c:$(n)" spec="ScaleOperator" parameter="@fastUcldMean.c:$(n)" scaleFactor="0.5" weight="5.0"/>

    <operator id="RatesRandomWalk.c:$(n)" spec="RealRandomWalkOperator" parameter="@fastRates.c:$(n)" weight="3.0" windowSize="0.1"/>

    <operator id="RatesSwapOperator.c:$(n)" spec="SwapOperator" parameter="@fastRates.c:$(n)" weight="3.0"/>

    <operator id="RatesScaleOperator.c:$(n)" spec="ScaleOperator" parameter="@fastRates.c:$(n)" weight="3.0"/>

	<log id="fastRatesStat.c:$(n)" spec="beast.base.evolution.RateStatistic" branchratemodel="@FastRelaxedClock.c:$(n)" tree="@Tree.t:$(n)"/>
]]>
            <connect srcID='fastUcldMean.c:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(fastUcldMean.c:$(n)) and fastUcldMean.c:$(n)/estimate=true'/>
            <connect srcID='fastUcldStdev.c:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(fastUcldStdev.c:$(n)) and fastUcldStdev.c:$(n)/estimate=true'/>
            <connect srcID='fastRates.c:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'/>

            <connect srcID='fastUcldMeanScaler.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastUcldMean.c:$(n)) and fastUcldMean.c:$(n)/estimate=true'>Scale clock rate of partition
                c:$(n)
            </connect>
            <connect srcID='fastUcldStdevScaler.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastUcldStdev.c:$(n)) and fastUcldStdev.c:$(n)/estimate=true'>Scale stdev of rate of partition c:$(n)
            </connect>
            <connect srcID='FastInternalnodesOperator.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'>Change internal rates of partition c:$(n)
            </connect>
            <connect srcID='FastRootOperator1.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'>Change root rates 1 of partition c:$(n)
            </connect>
            <connect srcID='FastRootOperator2.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'>Change root rates 2 of partition c:$(n)
            </connect>
            <connect srcID='FastRootOperator3.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'>Change root rates 3 of partition c:$(n)
            </connect>
            <connect srcID='RatesRandomWalk.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'>Change all rates of partition c:$(n)
            </connect>
            <connect srcID='RatesSwapOperator.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'>Change all rates of partition c:$(n)
            </connect>
            <connect srcID='RatesScaleOperator.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(fastRates.c:$(n)) and fastRates.c:$(n)/estimate=true'>Change all rates of partition c:$(n)
            </connect>

            <connect srcID='Tree.t:$(n)' targetID='FastRelaxedClock.c:$(n)' inputName='tree' if='inlikelihood(FastRelaxedClock.c:$(n))'/>
            <connect srcID='Tree.t:$(n)' targetID='rate.c:$(n)' inputName='tree' if='inlikelihood(FastRelaxedClock.c:$(n))'/>

            <connect srcID='fastUcldMean.c:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(fastUcldMean.c:$(n)) and fastUcldMean.c:$(n)/estimate=true'/>
            <connect srcID='fastUcldStdev.c:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(fastUcldStdev.c:$(n))'/>
            <connect srcID='fastRatesStat.c:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(fastRates.c:$(n))'/>


            <connect srcID='fastUcldStdevPrior.c:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(fastUcldStdev.c:$(n))'>fast uncorrelated lognormal relaxed clock stdev of partition c:$(n)
            </connect>
            <connect srcID='fastUcldMeanPrior.c:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(fastUcldMean.c:$(n)) and inlikelihood(Tree.t:$(n)) and fastUcldMean.c:$(n)/estimate=true'>
                fast uncorrelated lognormal relaxed clock mean of partition c:$(n)
            </connect>
            <connect srcID='FastRatePriorDistrbution.c:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(fastRates.c:$(n)) and inlikelihood(Tree.t:$(n)) and fastRates.c:$(n)/estimate=true'>
                fast uncorrelated lognormal relaxed clock rates of partition c:$(n)
            </connect>



            <connect srcID='FastRelaxedClock.c:$(n)' targetID='TreeWithMetaDataLogger.t:$(n)' inputName='branchratemodel'
                     if='inposterior(FastRelaxedClock.c:$(n))'/>
        </subtemplate>
	</mergewith>
</beast>
